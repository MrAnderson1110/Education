#include <iostream>
#include "LinkList.h"

using namespace std;

//основная структура хранения данных
struct Student {
	char* name = nullptr;
	char* groupNum = nullptr;
	int prod[5] = { 0,0,0,0,0 };

	~Student() {
		delete[] name;
		delete[] groupNum;
	}
};

int main(int acgc, char* argv[])
{
	//Инициализация

	//Создание связанного списка для хранения данных
	LinkList<Student> students;

	//главный цикл (крутится до завершения пользователем)
	do {
		/* Показать сообщение "нажмите h для подсказки
		* определить что нажато
		* Возможные варианты:
		* 
		* - Показать подсказку
		* - Показать все данные на экране
		* - Добавить запись
		* - Удалить запись
		* - Найти и вывести на экран студента по фамилии
		* - Сортировать список по группам
		* - Сортировать список по фамилии
		* - Сортировать список по средней успеваимости
		* - Редактировать успеваимость студента по фамилии
		* - Редактировать группу студента по фамилии
		* - Редактировать все данные студента по фамилии
		* - Выход
		* 
		* Проверка на правильность ввода
		* Если ввод неверен повторить цикл
		* Крутиться в цикле, пока пользователь не нажмет выход
		*/
	} while (true);

	cout << (1) % 19 + 1 << endl;
	return 0;
}

/*
* Функции:
* 
* - Отобразить подсказку
*	- Выводит на экран форматированный текст с основными пользовательскими коммандами
*	- Сигнатура: void showHint();
* 
* - Показать все данные
*	- Выводит на экран форматированный тексе со всеми элементами списка студентов
*	- Сигнатура: void showAll();
* 
* - Добавить запись
*	- Проверяет правильность ввода. 
*	- Создает новый элемент при успешной проверке. 
*	- Вызвает функцию связанного списка Add для добавления нововго элемента в конец списка
*	- При неудаче проверке выводит на экран сообщение об ошибе ввода и просит повторить ввод или говорит как завершить работу с добавлением
*	- После выполнения передает управление функции main
*	- Сигнатура: void addStudent();
* 
* - Удалить запить 
*	- Проверяет правильность ввода пользованеля (пользователь вводит фамилию студента)
*	- При удачной проверке передает управление функции delete связанного списка
*	- При неудачной проверке просит повторить ввод или сообщает как выйти из функции
*	- После выполнения передает управление функции main
*	- Сигнатура: void deleteStudent();
* 
* - Найти и вывести на экран студента по фамилии
*	- Проверяет правильность ввода пользованеля (пользователь вводит фамилию студента)
*	- При удачной проверке переадет управление функции find связанного списка, которая вобвращает указатель на нужные данные
*	- Выводит на экран форматированный текст с искомыми данными
*	- При неудачной проверке просит повторить ввод или сообщает как выйти из функции
*	- После выполнения передает управление функции main
*	- Сигнатура: void findStudent();
* 
* - Сортировать список по группам
*	- Передает управление функции sort связанного списка
*	- После выполнения передает управление функции main
*	- Сигнатура: void sortByGroups();
* 
* - Сортировать список по фамилии
*	- Передает управление функции sort связанного списка
*	- После выполнения передает управление функции main
*	- Сигнатура: void sortByName();
* 
* - Сортировать список по средней успеваимости
*	- Передает управление функции sort связанного списка
*	- После выполнения передает управление функции main
*	- Сигнатура: void sortByEval();
* 
* - Редактировать успеваимость студента по фамилии
*	- Проверяет правильность ввода пользованеля (пользователь вводит фамилию студента)
*	- При неудачной проверке просит повторить ввод или сообщает как выйти из функции
*	- При удачной проверке переадет управление функции find связанного списка, которая вобвращает указатель на нужные данные
*	- Выводит на экран форматированный текст с найденными данными
*	- Выводит приглашение ко вводу данных
*	- Проверяет правильность ввода
*	- При неудачной проверке просит повторить ввод или сообщает как выйти из функции
*	- При удачной проверке редактирует соответствующие данные в списке
*	- После выполнения передает управление функции main
*	- Сигнатура: void editEval();
* 
* - Редактировать группу студента по фамилии
*	- Проверяет правильность ввода пользованеля (пользователь вводит фамилию студента)
*	- При неудачной проверке просит повторить ввод или сообщает как выйти из функции
*	- При удачной проверке переадет управление функции find связанного списка, которая вобвращает указатель на нужные данные
*	- Выводит на экран форматированный текст с найденными данными
*	- Выводит приглашение ко вводу данных
*	- Проверяет правильность ввода
*	- При неудачной проверке просит повторить ввод или сообщает как выйти из функции
*	- При удачной проверке редактирует соответствующие данные в списке
*	- После выполнения передает управление функции main
*	- Сигнатура: void editGroup();
* 
* - Редактировать все данные студента по фамилии
*	- Проверяет правильность ввода пользованеля (пользователь вводит фамилию студента)
*	- При неудачной проверке просит повторить ввод или сообщает как выйти из функции
*	- При удачной проверке переадет управление функции find связанного списка, которая вобвращает указатель на нужные данные
*	- Выводит на экран форматированный текст с найденными данными
*	- Выводит приглашение ко вводу данных
*	- Проверяет правильность ввода
*	- При неудачной проверке просит повторить ввод или сообщает как выйти из функции
*	- При удачной проверке редактирует соответствующие данные в списке
*	- После выполнения передает управление функции main
*	- Сигнатура: void editAll();
* 
* - Выход
*	- Завершает выполнение главного цикла программы, при необхдимости освобождает ресурсы
*	- Сигнатура: void exit();
* 
* Дополнительные функции
* 
* Вывод форматированного сообщения
* void showMassage(char* string);
* 
* Получение данных из потока ввода
* tamplate<typename T>
* T getMassage();
* 
* Сохранить данные в локальное хранилище
* void loadData(LinkList<Student> &list);
* 
* Выгрузить данные из локального хранилища
* void storeData(LinkList<Student> &list);
*/